include $(TOPDIR)/rules.mk

PKG_NAME:=mt7668u
PKG_RELEASE=5

PKG_LICENSE:=GPLv2
PKG_LICENSE_FILES:=

PKG_SOURCE_URL:=https://github.com/TSKangetsu/mt7668u
PKG_SOURCE_PROTO:=git
PKG_SOURCE_DATE:=2023-11-17
PKG_SOURCE_VERSION:=2ad0d29920fb8c68a9d0d12085668961f01964c8
PKG_MIRROR_HASH:=skip

PKG_BUILD_PARALLEL:=1

STAMP_CONFIGURED_DEPENDS := $(STAGING_DIR)/usr/include/mac80211-backport/backport/autoconf.h

include $(INCLUDE_DIR)/kernel.mk
include $(INCLUDE_DIR)/package.mk

define KernelPackage/mt7668-default
  SUBMENU:=Wireless Drivers
  DEPENDS:= \
	+kmod-cfg80211 \
	+kmod-usb-core \
	+@DRIVER_11AC_SUPPORT +@DRIVER_11N_SUPPORT
endef

TARGET_CFLAGS += -I$(STAGING_DIR)/usr/include/libnl-tiny
#/***** Manage configs into compile options ******/
PKG_CONFIG_DEPENDS += \
	CONFIG_MTK_COMBO_PLATFORM=x86 \
	CONFIG_MTK_COMBO_WIFI_HIF=usb \
	CONFIG_MTK_WIFI_ONLY=m \
	CONFIG_MTK_COMBO=m \
	CONFIG_MTK_COMBO_WIFI=m \
	CONFIG_MTK_COMBO_COMM=m \
	CONFIG_MTK_COMBO_COMM_UART=m \
	CONFIG_MTK_COMBO_COMM_SDIO=m \
	CONFIG_MT_WIFI_CHRDEV=m \
	CONFIG_MTK_PREALLOC_MEMORY=n \

#CFG_NUM_DIFFERENT_CHANNELS_STA=1
#CFG_NUM_DIFFERENT_CHANNELS_P2P=1
#CFG_DRIVER_INITIAL_RUNNING_MODE=3
#CFG_ENABLE_WAKE_LOCK=0
CFG_ANDROID_AOSP_PRIV_CMD=n
#CFG_DEFAULT_DBG_LEVEL=0xF
CFG_TX_DIRECT_USB=1
CFG_RX_DIRECT_USB=1
CFG_USB_REQ_TX_DATA_FFA_CNT=10
CFG_USB_REQ_TX_DATA_CNT=2
CFG_USB_REQ_RX_DATA_CNT=2
CFG_SUPPORT_DFS_MASTER=0
CFG_SCAN_CHANNEL_SPECIFIED=1
#CFG_SUPPORT_SINGLE_SKU_LOCAL_DB=0
CFG_P2P_SCAN_REPORT_ALL_BSS=0
CFG_DRIVER_INF_NAME_CHANGE=n
#CFG_SUPPORT_ROAMING=0
CFG_CHIP_RESET_SUPPORT=0
CFG_SDIO_RX_AGG_TASKLET=0
CFG_SUPPORT_DISABLE_BCN_HINTS=n
CFG_MET_PACKET_TRACE_SUPPORT=0

ifneq ($(CFG_NUM_DIFFERENT_CHANNELS_STA),)
PLATFORM_FLAGS += -DCFG_NUM_DIFFERENT_CHANNELS_STA=$(CFG_NUM_DIFFERENT_CHANNELS_STA)
endif

ifneq ($(CFG_NUM_DIFFERENT_CHANNELS_P2P),)
PLATFORM_FLAGS += -DCFG_NUM_DIFFERENT_CHANNELS_P2P=$(CFG_NUM_DIFFERENT_CHANNELS_P2P)
endif

ifneq ($(CFG_DRIVER_INITIAL_RUNNING_MODE),)
PLATFORM_FLAGS += -DCFG_DRIVER_INITIAL_RUNNING_MODE=$(CFG_DRIVER_INITIAL_RUNNING_MODE)
endif

ifneq ($(CFG_ENABLE_WAKE_LOCK),)
PLATFORM_FLAGS += -DCFG_ENABLE_WAKE_LOCK=$(CFG_ENABLE_WAKE_LOCK)
endif

ifneq ($(CFG_DEFAULT_DBG_LEVEL),)
PLATFORM_FLAGS += -DCFG_DEFAULT_DBG_LEVEL=$(CFG_DEFAULT_DBG_LEVEL)
endif

ifneq ($(CFG_TX_DIRECT_USB),)
PLATFORM_FLAGS += -DCFG_TX_DIRECT_USB=$(CFG_TX_DIRECT_USB)
endif

ifneq ($(CFG_RX_DIRECT_USB),)
PLATFORM_FLAGS += -DCFG_RX_DIRECT_USB=$(CFG_RX_DIRECT_USB)
endif

ifneq ($(CFG_USB_REQ_TX_DATA_FFA_CNT),)
PLATFORM_FLAGS += -DCFG_USB_REQ_TX_DATA_FFA_CNT=$(CFG_USB_REQ_TX_DATA_FFA_CNT)
endif

ifneq ($(CFG_USB_REQ_TX_DATA_CNT),)
PLATFORM_FLAGS += -DCFG_USB_REQ_TX_DATA_CNT=$(CFG_USB_REQ_TX_DATA_CNT)
endif

ifneq ($(CFG_USB_REQ_RX_DATA_CNT),)
PLATFORM_FLAGS += -DCFG_USB_REQ_RX_DATA_CNT=$(CFG_USB_REQ_RX_DATA_CNT)
endif

ifneq ($(CFG_SUPPORT_ROAMING),)
PLATFORM_FLAGS += -DCFG_SUPPORT_ROAMING=$(CFG_SUPPORT_ROAMING)
endif

ifneq ($(CFG_SUPPORT_DFS_MASTER),)
PLATFORM_FLAGS += -DCFG_SUPPORT_DFS_MASTER=$(CFG_SUPPORT_DFS_MASTER)
endif

ifneq ($(CFG_SUPPORT_SINGLE_SKU_LOCAL_DB),)
PLATFORM_FLAGS += -DCFG_SUPPORT_SINGLE_SKU_LOCAL_DB=$(CFG_SUPPORT_SINGLE_SKU_LOCAL_DB)
endif

ifeq ($(CFG_DRIVER_INF_NAME_CHANGE), y)
PLATFORM_FLAGS += -DCFG_DRIVER_INF_NAME_CHANGE
endif

ifneq ($(CFG_P2P_SCAN_REPORT_ALL_BSS),)
PLATFORM_FLAGS += -DCFG_P2P_SCAN_REPORT_ALL_BSS=$(CFG_P2P_SCAN_REPORT_ALL_BSS)
endif

ifneq ($(CFG_SCAN_CHANNEL_SPECIFIED),)
PLATFORM_FLAGS += -DCFG_SCAN_CHANNEL_SPECIFIED=$(CFG_SCAN_CHANNEL_SPECIFIED)
endif

ifneq ($(CFG_CHIP_RESET_SUPPORT),)
PLATFORM_FLAGS += -DCFG_CHIP_RESET_SUPPORT=$(CFG_CHIP_RESET_SUPPORT)
endif

ifeq ($(CFG_ANDROID_AOSP_PRIV_CMD), y)
PLATFORM_FLAGS += -DCFG_ANDROID_AOSP_PRIV_CMD
endif

ifneq ($(CFG_SDIO_RX_AGG_TASKLET),)
PLATFORM_FLAGS += -DCFG_SDIO_RX_AGG_TASKLET=$(CFG_SDIO_RX_AGG_TASKLET)
endif

ifeq ($(CFG_SUPPORT_DISABLE_BCN_HINTS), y)
PLATFORM_FLAGS += -DCFG_SUPPORT_DISABLE_BCN_HINTS
endif

#For adjust channel request interval when ais join net work
ifeq ($(CFG_SUPPORT_ADJUST_JOIN_CH_REQ_INTERVAL),y)
PLATFORM_FLAGS += -DCFG_SUPPORT_ADJUST_JOIN_CH_REQ_INTERVAL
endif

ifeq ($(CFG_SUPPORT_P2P_GO_KEEP_RATE_SETTING), y)
PLATFORM_FLAGS += -DCFG_SUPPORT_P2P_GO_KEEP_RATE_SETTING
endif

ifeq ($(CFG_SUPPORT_P2P_GO_11B_RATE),y)
PLATFORM_FLAGS += -DCFG_SUPPORT_P2P_GO_11B_RATE
endif

ifeq ($(CFG_SUPPORT_P2P_OPEN_SECURITY),y)
PLATFORM_FLAGS += -DCFG_SUPPORT_P2P_OPEN_SECURITY
endif

ifeq (CFG_MET_PACKET_TRACE_SUPPORT,)
PLATFORM_FLAGS += -DCFG_MET_PACKET_TRACE_SUPPORT=$(CFG_MET_PACKET_TRACE_SUPPORT)
endif


#====================================================================##

NOSTDINC_FLAGS := \
	$(KERNEL_NOSTDINC_FLAGS) \
	-I$(PKG_BUILD_DIR) \
	-I$(PKG_BUILD_DIR)/include \
	-I$(STAGING_DIR)/usr/include/mac80211-backport \
	-I$(STAGING_DIR)/usr/include/mac80211-backport/uapi \
	-I$(STAGING_DIR)/usr/include/mac80211 \
	-I$(STAGING_DIR)/usr/include/mac80211/uapi \
	-include backport/backport.h

define KernelPackage/mt7668u
  $(KernelPackage/mt7668-default)
  TITLE:=MediaTek MT7668 USB wireless driver common code
  PKG_MAKE_FLAGS += $(PKG_CONFIG_DEPENDS)
  FILES:=$(PKG_BUILD_DIR)/wlan_mt7668_usb.ko
  AUTOLOAD:=$(call AutoProbe,wlan_mt7668_usb.ko)
endef

define Build/Compile
	+$(MAKE) $(PKG_JOBS) -C "$(LINUX_DIR)" \
		$(KERNEL_MAKE_FLAGS) \
		$(PKG_MAKE_FLAGS) \
		PLATFORM_FLAGS="$(PLATFORM_FLAGS)" \
		NOSTDINC_FLAGS="$(NOSTDINC_FLAGS)" \
		M="$(PKG_BUILD_DIR)" \
		modules
endef

$(eval $(call KernelPackage,mt7668u))
